/*
 * Copyright (c) 2016, DTU
 * Simplified BSD License
 */

/*
 * Utility functions for the ISA simulator of RISC-V.
 * 
 * Author: Martin Schoeberl (martin@jopdesign.com)
 * 
 */

package wildcat.isasim

import scala.io.Source

object Util {

  /**
   * Read a binary file into an array vector
   */
  def readBin(fileName: String): Array[Int] = {

    println("Reading " + fileName)
    // maybe find a more elegant way to read a binary file
    val source = Source.fromFile(fileName)(scala.io.Codec.ISO8859)
    val byteArray = source.map(_.toByte).toArray
    source.close()

    // use an array to convert input
    val arr = new Array[Int](math.max(1, byteArray.length / 4))

    if (byteArray.length == 0) {
      arr(0) = 0
    }

    // little endian
    for (i <- 0 until byteArray.length / 4) {
      var word = 0
      for (j <- 0 until 4) {
        word >>>= 8
        word += (byteArray(i * 4 + j).toInt & 0xff) << 24
      }
      // printf("%08x\n", word)
      arr(i) = word
    }

    arr
  }

  /**
   * Read a hex file in generated by RISC-V tests.
   * File is in a strange format: 128 bits per line,
   * resulting in first word in last (rightmost position).
   */
  def readHex(fileName: String): Array[Int] = {

    println("Reading " + fileName)
    val length = Source.fromFile(fileName).getLines().length
    val arr = new Array[Int](length * 4)

    val lines = Source.fromFile(fileName).getLines()
    var i = 0
    for (l <- lines) {
      for (j <- 0 until 4) {
        val s = l.substring((3-j) * 8, (3-j) * 8 + 8)
        // Integer parsing does not like hex strings with MSB set
        arr(i*4+j) = java.lang.Long.parseLong(s, 16).toInt
      }
      i += 1
    }

    arr
  }
}
